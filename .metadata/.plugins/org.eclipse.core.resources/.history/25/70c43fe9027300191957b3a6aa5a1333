package com.kafka.example.stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.kafka.example.model.User;

import twitter4j.StallWarning;
import twitter4j.Status;
import twitter4j.StatusDeletionNotice;
import twitter4j.StatusListener;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import com.kafka.example.twitter4j.Twitter4jApplication;


@RestController
@RequestMapping("kafka")
class receiveData{
	
	@GetMapping("/publish")
	public String post() {
		Streaming stream = new Streaming();
		stream.printStream();
		return "Success";
	}
}


public class Streaming {
	
	@Autowired
	public static KafkaTemplate<String,String> kafkaTemplate;
	
	private static final String TOPIC = "Kafka_Tweet";
	
	Twitter twitter = TwitterFactory.getSingleton();
	StatusListener listener = null;

	public Streaming() {
		listener = new StatusListener() {

			@Override
			public void onException(Exception ex) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onStatus(Status status) {
				System.out.println(status.getUser().getName() + " : " + status.getText()); 	
				System.out.println(kafkaTemplate);
				kafkaTemplate.send(TOPIC,status.getText());
			}

			@Override
			public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onTrackLimitationNotice(int numberOfLimitedStatuses) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onScrubGeo(long userId, long upToStatusId) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onStallWarning(StallWarning warning) {
				// TODO Auto-generated method stub
				
			}
		};
	}

	public void printStream() {
		TwitterStream twitterStream = new TwitterStreamFactory().getInstance();
		twitterStream.addListener(listener); // sample() method internally creates a thread which manipulates
												// TwitterStream // and calls these adequate listener methods
												// continuously. 
		twitterStream.sample();
	}
}
