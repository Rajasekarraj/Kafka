package com.kafka.example.stream;

import ch.qos.logback.core.status.StatusListener;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;

public class Streaming {
	
	Twitter twitter = TwitterFactory.getSingleton(); 
	StatusListener listener = null;
	public Streaming() {
		listener = new StatusListener() {
			@Override 
			public void onStatus(Status status) { 
				// prints every status in the stream 
				System.out.println(status.getUser().getName() + " : " + status.getText()); 
				// write to text file 
				try {
					Util.writeStringToFile("/home/css/twitterFile/dataFiles/file1.txt", status.getCreatedAt() + "|" + status.getText() + "\n"); 
				} 
				catch (IOException e) {
					e.printStackTrace(); 
				} 
			 } 
			@Override 
			public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {
				
			} 
			@Override 
			public void onTrackLimitationNotice(int numberOfLimitedStatuses) { 
				
			} 
			@Override 
			public void onException(Exception ex) { 
				ex.printStackTrace(); 
			} @Override public void onScrubGeo(long userId, long upToStatusId) { } @Override public void onStallWarning(StallWarning warning) { } };
			}
		}
	}
	public void printStream() { 
		TwitterStream twitterStream = new TwitterStreamFactory().getInstance(); 
		twitterStream.addListener(listener); // sample() method internally creates a thread which manipulates TwitterStream // and calls these adequate listener methods continuously. twitterStream.sample();
	}
}
